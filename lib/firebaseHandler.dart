import 'dart:convert';
import 'dart:io';
import 'dart:isolate';

import 'package:farm_to_dish/global_objects.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:http/http.dart' as http;

import 'Remote/modelstack.dart';
import 'Repository/databaseHelper.dart';
import 'firebase_options.dart';
import 'global_handlers.dart';
import 'global_string.dart';

import 'package:googleapis_auth/auth_io.dart' as auth;
import 'package:googleapis/servicecontrol/v1.dart' as servicecontrol;
//import 'package:googleapis/servicecontrol/v1.dart
//08033500977 Pastor Sam
import 'dart:convert';
import 'package:flutter/services.dart';
import 'dart:developer' as devtools show log;
import 'package:dart_jsonwebtoken/dart_jsonwebtoken.dart';

//import 'notificationcontroller.dart';

// core Flutter primitives
import 'package:flutter/foundation.dart';
// core FlutterFire dependency
import 'package:firebase_core/firebase_core.dart';
// generated by

import 'firebase_options.dart';
// FlutterFire's Firebase Cloud Messaging plugin

import 'package:firebase_messaging/firebase_messaging.dart';

import 'sharedpref.dart';

Future<String> handleUpdates(
    RemoteMessage remoteMessage, bool foreground) async {
  String response = "";
  if (remoteMessage.notification != null) {
    try {
      String msg = jsonEncode(remoteMessage.notification!.body);
      logger("Body:$msg");

      String ttld = jsonEncode(remoteMessage.notification!.title);
      logger("Title:$ttld");

      /*

      Map<String, dynamic> json = jsonDecode(jsonDecode(msg));
      logger("The Title${json['title']}");

      if (json['notify']) {
        NotificationController.createNewNotification(
            json['title'], json['content']);
      }

      */

      Map<String, dynamic> dtt = remoteMessage.data;
      String parse = jsonEncode(dtt);
      logger("The Data: $parse");

      await firebaseProcession(parse);

      // _run(json['content'], json[unq], parse, dtt);
    } catch (e) {
      logger("handler error: $e");
    }
  } else {
    try {
      Map<String, dynamic> dtt = remoteMessage.data;
      String parse = jsonEncode(dtt);
      logger("The Data: $parse");

      await firebaseProcession(parse);
    } catch (e) {
      logger("handler error: $e");
    }
  }

  return response;
}

Future<void> firebaseProcession(String data) async {
  try {
    logger("My Data: $data");
    Map<String, dynamic> dtt = jsonDecode(data);
    logger("Data ess: ${dtt["essence"]}");
    pref = SharedPref();
    switch (dtt["essence"]) {
      case instr:
        break;
      case brdc:
        broadcast bdc =
            broadcast(caption: dtt[cpt], cta: dtt[cta], image: dtt[img]);

        Map<String, String> hd = {cpt: dtt[cpt], cta: dtt[cta], img: dtt[img]};
        pref.setPrefString(cpt, jsonEncode(hd));

        dshCtx.read<UINotifier>().broadCast(bdc);
        break;
      case ord:
        break;
      case acct:
        String bal = dtt[amt];
        try {
          /*
          DatabaseHelper dba = DatabaseHelper(table: usrWlt);

          //   [id, usrId, amt, lstTrnz];
          Map<String, dynamic> item = {
            id: "909891",
            usrId: "909891",
            amt: bal,
            lstTrnz: ""
          };

          

          dba.insertData(item);
          */

          pref.setPrefString(acct, bal);

          balance blh = balance(bal: bal);
          //bll = blh;
          dshCtx.read<UINotifier>().accountBalance(blh);
        } catch (e) {
          logger("$acct Error:  $e");
        }
        break;
    }
  } catch (e) {
    logger("fb procession error: $e");
  }
}

late SharedPref pref;

void _backgroundTask(SendPort sendPort) {
  // Perform time-consuming operation here
  // ...

  // Send result back to the main UI isolate
  sendPort.send('Task completed successfully!');
}

final ReceivePort _port = ReceivePort();

void _startBackgroundTask() async {
  try {
    await Isolate.spawn(_backgroundTask, _port.sendPort);
    _port.listen((message) async {
      logger("got a notification**");

      await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
    });
  } catch (e) {
    logger("check error: $e");
  }

  try {
    final fcmToken = await FirebaseMessaging.instance.getToken();
    fbId = fcmToken!;
    logger("UserToken:$fbId");
    pref.setPrefString(tk_id, fcmToken);
    pref.setPrefBool(token, true);
  } catch (e) {}

  //  await FirebaseMessaging.instance.getToken();

  //  await Firebase.initializeApp();

  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    // ignore: avoid_print
    print('Got a message whilst in the foreground!');
    if (message.notification != null) {
      // print('Notification Title: ${message.notification.title}');
      // print('Notification Body: ${message.notification.body}');
    }
  });

  Future<void> messageHandler(RemoteMessage message) async {
    String msg = jsonEncode(message.data);
    logger("Background Message Received:$msg");
    logger("Msg rcpt");
  }

  FirebaseMessaging.onBackgroundMessage(messageHandler);

  FirebaseMessaging.onMessage.listen((event) {
    logger("Fore");
    // do something
  });
  FirebaseMessaging.onMessageOpenedApp.listen((event) {
    logger("Fore OPen");
    // do something
  });

  // FirebaseMessaging.onMessage.listen((RemoteMessage message) {
  //   /*
  //   setState(() {
  //     _messages = [..._messages, message];
  //   });

  //   */
  //   logger("CheckMsg***$message");
  // });
}

Future<void> subscribeToTopic(String topic) async {
  await Firebase.initializeApp();
  await FirebaseMessaging.instance.subscribeToTopic(topic);
}

Future<void> unsubscribeFromTopic(String topic) async {
  await FirebaseMessaging.instance.unsubscribeFromTopic(topic);
}

Future<void> obtainPermissions() async {
  FirebaseMessaging messaging = FirebaseMessaging.instance;

  NotificationSettings settings = await messaging.requestPermission(
    alert: true,
    announcement: false,
    badge: true,
    carPlay: false,
    criticalAlert: false,
    provisional: false,
    sound: true,
  );

  if (settings.authorizationStatus == AuthorizationStatus.authorized) {
    print('User granted permission');
  } else if (settings.authorizationStatus == AuthorizationStatus.provisional) {
    print('User granted provisional permission');
  } else {
    print('User declined or has not accepted permission');
  }
}

/*

Future<void> sendMessageToFcmTopic() throws Exception {
   String topicName = "app_promotion";

   Message message =
       Message.builder()
           .setNotification(
               Notification.builder()
                   .setTitle("A new app is available")
                   .setBody("Check out our latest app in the app store.")
                   .build())
           .setAndroidConfig(
               AndroidConfig.builder()
                   .setNotification(
                       AndroidNotification.builder()
                           .setTitle("A new Android app is available")
                           .setBody("Our latest app is available on Google Play store")
                           .build())
                   .build())
           .setTopic("app_promotion")
           .build();

   FirebaseMessaging.getInstance().send(message);

   System.out.println("Message to topic sent successfully!!");
 }

 */

/*
function createJwtToken($serviceAccountKeyFile) {
    $keyFile = json_decode(file_get_contents($serviceAccountKeyFile), true);
    $privateKey = $keyFile['private_key'];
    $token = [
        "iss" => $keyFile['client_email'],
        "sub" => $keyFile['client_email'],
        "aud" => "https://oauth2.googleapis.com/token",
        "iat" => time(),
        "exp" => time() + 3600,
        "scope" => "https://www.googleapis.com/auth/firebase.messaging",
    ];
    return JWT::encode($token, $privateKey, 'RS256');
}
*/

Future<String> createJwtToken(final serviceAccountKey) async {
  Map<String, dynamic> keyFile = serviceAccountKey;
  //jsonDecode(await rootBundle.loadString('data/auth.json'));
  String privateKey = keyFile['private_key'];

  final today = DateTime.now();
  final OneHourFromNow = today.add(const Duration(hours: 1));

  final jwt = JWT({
    "iss": keyFile['client_email'],
    "sub": keyFile['client_email'],
    "aud": "https://oauth2.googleapis.com/token",
    "iat": DateTime.now,
    "exp": OneHourFromNow,
    "scope": "https://www.googleapis.com/auth/firebase.messaging",
  });

  final pem = serviceAccountKey["private_key"];
  //  final pem = File('./example/rsa_private.pem').readAsStringSync();
  final key = RSAPrivateKey(pem!);

  String token = jwt.sign(key, algorithm: JWTAlgorithm.RS256);

  print('Signed token: $token\n');

  return token;
}

// RSA SHA-256 algorithm
Future<void> rs256() async {
  String token;

  final serviceAccountJson = {
    "type": "service_account",
    "project_id": "farmtodish-7e3e2",
    "private_key_id": "3c06c1b70bbb85a7816e62117ced295289f940df",
    "private_key":
        "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDQVsDIRfs5tdew\n4/NXvvc+V0as+Z3lveRIIEoDctAjVyh9nDF85AAnbTkUkCYdsscOLoInYAOjtkEN\nVh647U/aBVP9w305KJdjy151e7zKpfq61WCGwMOTyKDmylyyI4/Mh0pyUjLOiZZr\nAmUmbRdSX8wkyVwoAvlkRG/FHdFh+Eu4xZVYCneU+MdhN5/+3ZTnBf+t56FYW58X\nDMy6tb/uonSbmRX+/6gPLSgQ98qyFgB6qDfqMtpG12O1TjCC843UZKufLEpPHrru\nKgf8l7tSZP3SYFP53pJACTHXRlJCY9vqUuJNZjKk4DKRlQ47ePdyOX1AH7MGHYDe\nS6B5SHmbAgMBAAECggEARYGT6p0SXiQRNDYwoscWxIkojp/usk2igf+nwbPFxeyX\nmSSJjCGi/YRehUI8PS8+YrhYett5C17MIC9pq4ec2t9pMKHOPsoQi943AtoH19H9\nLuTuQbbA6SaHq8e6mkHsAS/nwfEzex2C/et8JJBDths4x9MX+E9Ztb5xTaGPj+/E\noLPHqI6err3RGFU9vHTOVjUvIYHUoGoWquMQ5HKVvADHIJkA4HAPXQzyY4rE8Uzk\nYvPN69m85ML6OlRr2sm8JFLgRyoAuQWKGQb3i1jl3STQK8gPeO75KOvbCQbzsLH8\nSFl1qRyLzrylMtsSfb3AL4O4wZK1CJevFKDG41k1EQKBgQD2sgLQJQb6lLT96m3V\nJ4mBXN5UMYnJjZ9YCsHebfiVcAaz9AYmD4jZzWZwl92WGkeGqoY1+qpCpSGdKLtI\nmA6vl7IB/OrApcJZd1q5pATdzdYwTP1l7cXFQePLZmeITjJJOOGNykkhX3ZcC8Mn\nhYZI3/SYvrrY6wuUSGEd3yW5qwKBgQDYMmM/koQz3xs8j/yft2wdwtFhWfGwrsjo\n9v+DZrVmsVLTJMtrU20LC8ppUzA/MDe9G/vl398h9iQyx1fCJj/Eh8u9siEhR7uF\nvHZ3ld5FcpbOx1HtGtOnvlQwD++ZhqEnsnhfZnRiZtd4l2oi+fitcbn65PsYCkKM\nJSRElLCv0QKBgBx+v1hvjnjPSICz3W/rmzR4F6498p53X1p6E56vsTEBuaR7oWIw\nFSyjTxveTtgRvQVPGSWPCK+eB13x4IAoIDokGYmlPzB1dReEc9RRn8ZHCmCV5Acs\nCdYZIEjUUU0rSx+uFE+eeAgE0NUc/rPH9pTgWY5zKX342GOOYLlklyT1AoGAJ6VF\n0fiaSbDWG8sDtn46U1LQdpu52H6U1TPGM2B4T3ahC5spumq4CliFK79Xj57V+dXR\n4ZumHWI3zSAFFdNRykZktEqgDKxM1P90cgWHlxCmWxDuEx7iRVZ/tbiWZX7suozd\nyhDNsuXNCY4qpnNUiOncAwhOi2AGSBDfj7v8kqECgYBBg9X+SZWN8ZZlcuO2KXh7\nc8FXUXBd071uJE9+0vLugCqd+TDEroWuDO329BxSf+RlAlWISsP3RddRE0MLq8G5\nDZytfWusyP/bD1cO0h8XyIkNb/8+vM6xTuorZNn9hP9HGl/MK9/K7w06agKNAFQM\njJTB7WOnRUSHsFVSapiT5g==\n-----END PRIVATE KEY-----\n",
    "client_email":
        "firebase-adminsdk-k7w7l@farmtodish-7e3e2.iam.gserviceaccount.com",
    "client_id": "107957432154927885517",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url":
        "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-k7w7l%40farmtodish-7e3e2.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
  };

  /* Sign */ {
    // Create a json web token
    final jwt = JWT(
      {
        'id': 123,
        'server': {
          'id': '3e4fc296',
          'loc': 'euw-2',
        }
      },
      issuer: 'https://github.com/jonasroussel/dart_jsonwebtoken',
    );

    // Sign it
    // final pem = await rootBundle.loadString('data/auth.json');
    final pem = serviceAccountJson["private_key"];
    //  final pem = File('./example/rsa_private.pem').readAsStringSync();
    final key = RSAPrivateKey(pem!);

    token = jwt.sign(key, algorithm: JWTAlgorithm.RS256);

    print('Signed token: $token\n');
  }

  /* Verify */ {
    try {
      // Verify a token

      final pem = serviceAccountJson[
          "private_key"]; // await rootBundle.loadString('data/auth.json');

      /// final pem =  File('./example/rsa_public.pem').readAsStringSync();
      final key = RSAPublicKey(pem!);

      final jwt = JWT.verify(token, key);

      print('Payload: ${jwt.payload}');
    } on JWTExpiredException {
      print('jwt expired');
    } on JWTException catch (ex) {
      print(ex.message); // ex: invalid signature
    }
  }
}

Future<String> getAccessToken(Map<String, dynamic> accJson) async {
  List<String> scopes = ["https://www.googleapis.com/auth/firebase.messaging"];

  /*

  http.Client client = await auth.clientViaServiceAccount(
      auth.ServiceAccountCredentials.fromJson(serviceAccountJson), scopes);

  auth.AccessCredentials credentials =
      await auth.obtainAccessCredentialsViaServiceAccount(
          auth.ServiceAccountCredentials.fromJson(serviceAccountJson),
          scopes,
          client);

  client.close();
  return credentials.accessToken.data;
  */

  final client = await auth.clientViaServiceAccount(
      auth.ServiceAccountCredentials.fromJson(accJson), scopes);

  return client.credentials.accessToken.data;
}

Future<void> sendNotification(
    String deviceToken,
    BuildContext context,
    Map<String, dynamic> notification,
    Map<String, dynamic> data,
    Map<String, dynamic> fcmSVToken) async {
  String accessToken = await getAccessToken(fcmSVToken);
  logger("Access $accessToken");
  //   "ya29.a0AW4XtxicE7bZWlHVSeJzeYzwVF9u8jclqhABaVEKO4vkG9IoLmaMytn8rukj4gldDuQ5kLkr6YKfuHoylSo3qDCxRjc49AQUxmAfvl7S89aw6Z-YW7kqVaMngJk2jWPBpmgNHvmJK83ChX27_kVFObMzYNvGLqVnt-XtEZaa4waCgYKAV4SARUSFQHGX2Mii77o8zr77ovN1RdpalC05Q0177";
  // await createJwtToken(kkp);
  //await getAccessToken();

  const String senderId = 'farmtodish-7e3e2';
  String fcmendpoint =
      'https://fcm.googleapis.com/v1/projects/$senderId/messages:send';

  Map<String, dynamic> payload = {
    "message": {
      "token": deviceToken,
      "notification": notification,
      "data": data
    }
  };

  final http.Response response = await http.post(Uri.parse(fcmendpoint),
      headers: <String, String>{
        'Content-Type': 'application/json',
        'Authorization': 'Bearer $accessToken'
      },
      body: jsonEncode(payload));
  if (response.statusCode == 200) {
    print('FCM message sent successfully');
  } else {
    print('Failed to send FCM message: ${response.statusCode}');
  }
}

//Future<void> sendNotice() {}

Future<bool> sendPushMessage({
  required String recipientToken,
  required String title,
  required String body,
}) async {
  final jsonCredentials = await rootBundle.loadString('data/auth.json');
  final creds = auth.ServiceAccountCredentials.fromJson(jsonCredentials);

  final client = await auth.clientViaServiceAccount(
    creds,
    ['https://www.googleapis.com/auth/cloud-platform'],
  );

  final notificationData = {
    'message': {
      'token': recipientToken,
      'notification': {'title': title, 'body': body}
    },
  };

  //https://fcm.googleapis.com/v1/projects/farmtodish-7e3e2/messages:send

  const String senderId = 'farmtodish-7e3e2';
  final response = await client.post(
    Uri.parse('https://fcm.googleapis.com/v1/projects/$senderId/messages:send'),
    headers: {
      'content-type': 'application/json',
    },
    body: jsonEncode(notificationData),
  );

  client.close();
  if (response.statusCode == 200) {
    return true; // Success!
  }

  devtools.log(
      'Notification Sending Error Response status: ${response.statusCode}');
  devtools.log('Notification Response body: ${response.body}');
  return false;
}

/*

Future<void> sendMessageToFcmTopic() throws Exception {
   String topicName = "app_promotion";

   Message message =
       Message.builder()
           .setNotification(
               Notification.builder()
                   .setTitle("A new app is available")
                   .setBody("Check out our latest app in the app store.")
                   .build())
           .setAndroidConfig(
               AndroidConfig.builder()
                   .setNotification(
                       AndroidNotification.builder()
                           .setTitle("A new Android app is available")
                           .setBody("Our latest app is available on Google Play store")
                           .build())
                   .build())
           .setTopic("app_promotion")
           .build();

   FirebaseMessaging.instance.send(message);

   System.out.println("Message to topic sent successfully!!");
 }

 */
